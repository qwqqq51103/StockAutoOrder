股票市場模擬系統專案架構
概述
本專案是一個完整的股票市場模擬系統，具備市場行為建模、多種交易者類型（散戶、主力、個人交易者）、訂單簿管理，以及即時市場數據視覺化功能。

專案目錄結構
StockMainAction
主要封包，包含整個模擬的核心元件。

StockMainAction/
├── StockMarketSimulation.java     # 模擬主類別，負責協調整體模擬流程
├── controller/                    # MVC 控制器元件
│   ├── StockMarketController.java # 連接模型與視圖的控制器
│   ├── PriceAlertManager.java     # 🆕 價格提醒業務邏輯管理器
│   ├── QuickTradeManager.java      # 🆕 快捷交易業務邏輯管理器
│   ├── TechnicalIndicatorsCalculator.java # 技術指標計算器
│   └── listeners/
│       └── OrderBookListener.java # 訂單簿更新監聽介面
├── model/                         # 模型元件
│   ├── MarketAnalyzer.java        # 市場趨勢與技術指標分析
│   ├── MarketBehavior.java        # 模擬市場參與者行為
│   ├── MainForceStrategyWithOrderBook.java # 主力交易策略實作（含訂單簿）
│   ├── PersonalAI.java            # 個人交易者 AI，自定義行為
│   ├── RetailInvestorAI.java      # 散戶行為模擬 AI
│   ├── StockMarketModel.java      # MVC 架構中的市場核心模型
│   ├── core/                      # 核心資料結構
│   │   ├── MatchingMode.java      # 撮合模式/演算法定義
│   │   ├── Order.java             # 訂單物件（買/賣）
│   │   ├── OrderBook.java         # 撮合訂單用的訂單簿
│   │   ├── PersonalTrader.java    # 個人交易者實作
│   │   ├── PriceAlert.java        # 🆕 價格提醒數據模型
│   │   ├── QuickTradeConfig.java  # 🆕 快捷交易配置數據模型
│   │   ├── Stock.java             # 股票資料物件
│   │   ├── Trader.java            # 所有交易者的共用介面
│   │   └── Transaction.java       # 交易紀錄結構
│   └── user/
│       └── UserAccount.java       # 使用者帳戶管理（資金與持股）
├── util/                          # 工具類別元件
│   └── logging/                   # 日誌系統
│       ├── LogViewerWindow.java   # 日誌檢視 GUI 視窗
│       ├── LoggerConfig.java      # 日誌設定
│       └── MarketLogger.java      # 自訂日誌紀錄器
└── view/                          # 視圖元件
    ├── ControlView.java           # 控制面板視圖（簡化後）
    ├── MainView.java              # 主畫面與市場圖表視圖
    ├── OrderBookView.java         # 訂單簿視圖
    ├── OrderViewer.java           # 訂單瀏覽與篩選介面
    └── components/                # 可重用的 UI 元件
        ├── NewOrderBookTable.java # 強化版訂單簿表格
        ├── OrderBookTable.java    # 標準訂單簿表格
        ├── PriceAlertPanel.java   # 🆕 價格提醒UI面板組件
        └── QuickTradePanel.java   # 🆕 快捷交易UI面板組件
🏗️ 架構說明
MVC 架構模式
本系統採用 Model-View-Controller (MVC) 設計模式，確保關注點分離和代碼的可維護性。
📦 各模組詳細說明
🎯 主程式入口 (Root)
StockMarketSimulation.java

作用: 應用程式的啟動點和協調中心
職責:

初始化 MVC 三層架構
配置系統參數
啟動模擬流程


依賴: Controller、Model、View

🎮 控制器層 (Controller)
StockMarketController.java

作用: MVC 架構的核心控制器
職責:

連接 Model 和 View
處理用戶交互事件
協調各種業務邏輯
實現 ModelListener、PriceAlertPanelListener 和 QuickTradePanelListener 接口


關鍵方法:

onPriceChanged(): 處理價格變化事件
onAddAlert(): 處理添加價格提醒
handleLimitBuy(): 處理限價買入操作
onQuickTradeExecute(): 處理快捷交易執行



PriceAlertManager.java 🆕

作用: 價格提醒功能的業務邏輯管理器
職責:

管理價格提醒的增删改查
監控價格變化並觸發提醒
處理音效和彈窗提醒


關鍵功能:

支援四種提醒類型（高於/低於/上漲%/下跌%）
自動檢查提醒條件
防止重複觸發



QuickTradeManager.java 🆕

作用: 快捷交易功能的業務邏輯管理器
職責:

管理快捷交易配置
計算交易參數
驗證交易可行性
處理快捷鍵映射


關鍵功能:

初始化8個預設快捷交易配置
提供交易參數計算（數量、價格、總額）
交易前驗證（資金/持股檢查）
配置導出功能


依賴: QuickTradeConfig、MarketLogger

TechnicalIndicatorsCalculator.java

作用: 技術指標計算引擎
職責:

計算 MACD、布林帶、KDJ 等技術指標
維護歷史價格數據
提供指標計算結果



listeners/OrderBookListener.java

作用: 訂單簿變化監聽接口
職責: 定義訂單簿事件的回調方法

💾 模型層 (Model)
核心模型
StockMarketModel.java

作用: MVC 架構中的核心數據模型
職責:

管理市場狀態和數據
觸發各種事件通知
協調各種市場參與者


事件系統: 實現觀察者模式，支援多種事件類型

市場分析與行為
MarketAnalyzer.java

作用: 市場趨勢與技術分析引擎
功能:

計算技術指標（RSI、波動性、WAP）
分析市場趨勢
提供量化分析數據



MarketBehavior.java

作用: 模擬整體市場行為
功能:

模擬市場流動性
控制市場波動性
管理市場資金流



交易者 AI 系統
MainForceStrategyWithOrderBook.java

作用: 主力交易者的智能策略
特色:

基於訂單簿的交易決策
複雜的價格操縱策略
動態調整交易行為



RetailInvestorAI.java

作用: 散戶行為模擬
特色:

模擬情緒化交易
跟風和恐慌行為
技術分析驅動的決策



PersonalAI.java

作用: 個人交易者 AI
特色: 可自定義的交易策略和行為模式

核心資料結構 (core/)
PriceAlert.java 🆕

作用: 價格提醒的數據模型
結構:

AlertType: 提醒類型枚舉
targetPrice: 目標價格或百分比
triggered: 提醒觸發狀態


方法: checkAlert(): 檢查提醒條件

QuickTradeConfig.java 🆕

作用: 快捷交易配置的數據模型
結構:

QuickTradeType: 交易類型枚舉（固定數量、資金百分比、持股百分比、全倉、智能交易）
PriceStrategy: 價格策略枚舉（市價、當前價、溢價、折價、自定義）
配置屬性：名稱、交易類型、價格策略、買賣方向、數量/百分比、快捷鍵


關鍵方法:

calculateQuantity(): 根據配置計算交易數量
calculatePrice(): 根據策略計算交易價格
isMarketOrder(): 判斷是否為市價單



Order.java

作用: 訂單數據結構
屬性: 訂單類型、價格、數量、時間戳等

OrderBook.java

作用: 訂單簿管理器
功能:

管理買賣訂單隊列
執行訂單撮合算法
支援多種撮合模式



Stock.java

作用: 股票基本資料
屬性: 價格、成交量、歷史數據等

Transaction.java

作用: 交易記錄結構
屬性: 交易價格、數量、時間、參與者等

Trader.java

作用: 交易者介面定義
方法: 定義所有交易者的共同行為

PersonalTrader.java

作用: 個人交易者實現
功能: 個人用戶的交易邏輯

MatchingMode.java

作用: 撮合模式定義
模式: 價格優先、時間優先、混合模式等

用戶管理 (user/)
UserAccount.java

作用: 用戶帳戶管理
功能:

資金管理
持股管理
交易歷史記錄



🖥️ 視圖層 (View)
主要視圖
MainView.java

作用: 主界面和市場圖表顯示
功能:

價格走勢圖表
技術指標圖表（MACD、布林帶、KDJ）
成交量圖表
市場信息顯示



ControlView.java (簡化後)

作用: 控制面板視圖
職責:

UI 佈局和組件初始化
基本的 UI 更新
整合各種功能面板（包括 QuickTradePanel）


特色: 遵循單一職責原則，只負責界面組織

OrderBookView.java

作用: 訂單簿視覺化
功能: 即時顯示買賣訂單深度

OrderViewer.java

作用: 訂單瀏覽和管理界面
功能: 訂單篩選、排序、詳細查看

可重用組件 (components/)
PriceAlertPanel.java 🆕

作用: 價格提醒功能的 UI 組件
特色:

完全可重用的組件
事件驅動的設計
支援監聽器模式


功能:

提醒設置界面
提醒列表顯示
實時價格顯示



QuickTradePanel.java 🆕

作用: 快捷交易功能的 UI 組件
實現介面: QuickTradePanelListener
主要組件:

8個快捷交易按鈕（F1-F4, Ctrl+B/S/Q/W）
當前狀態顯示（價格、資金、持股）
交易預覽區域
配置列表和管理按鈕


關鍵功能:

快捷鍵註冊和響應
實時交易預覽計算
交易可行性驗證
配置選擇和執行


事件:

onQuickTradeExecute(): 執行快捷交易
onConfigureQuickTrade(): 打開配置管理
onPreviewQuickTrade(): 預覽交易詳情



OrderBookTable.java

作用: 標準訂單簿表格組件
功能: 基本的訂單簿顯示

NewOrderBookTable.java

作用: 強化版訂單簿表格
功能:

更豐富的視覺效果
進階的交互功能
更好的性能



🛠️ 工具層 (Util)
日誌系統 (logging/)
MarketLogger.java

作用: 自定義日誌記錄器
功能:

分類日誌記錄
性能監控
錯誤追蹤



LogViewerWindow.java

作用: 日誌查看 GUI
功能:

即時日誌顯示
日誌篩選和搜索
日誌導出



LoggerConfig.java

作用: 日誌系統配置
功能:

日誌級別設置
輸出格式配置
文件路徑管理



🔄 系統數據流
價格更新流程
StockMarketModel → onPriceChanged() → StockMarketController 
    ↓
├── MainView.updatePriceChart()
├── PriceAlertManager.updatePrice()
├── PriceAlertPanel.updateCurrentPrice()
└── QuickTradePanel.updateCurrentPrice()
價格提醒流程
用戶操作 → PriceAlertPanel → PriceAlertPanelListener → StockMarketController 
    ↓
PriceAlertManager → 檢查條件 → 觸發提醒（音效/彈窗）
快捷交易流程
快捷鍵/按鈕點擊 → QuickTradePanel → QuickTradePanelListener → StockMarketController
    ↓
QuickTradeManager.calculateQuickTrade() → 驗證交易參數
    ↓
StockMarketModel → OrderBook → 執行交易 → 事件通知 → UI更新
交易流程
用戶點擊 → ControlView → StockMarketController → StockMarketModel 
    ↓
OrderBook → 撮合算法 → Transaction → 事件通知 → UI更新
🎯 設計原則

單一職責原則 (SRP)

每個類別都有明確的單一職責
ControlView 只負責 UI 佈局
PriceAlertManager 只負責提醒邏輯
QuickTradeManager 只負責快捷交易邏輯


開放封閉原則 (OCP)

通過接口和抽象類支援擴展
新增功能無需修改現有代碼


依賴注入 (DI)

Controller 通過構造函數注入依賴
降低組件間的耦合度


觀察者模式

Model 使用事件監聽機制
支援多個 View 監聽同一個 Model


組件化設計

UI 組件高度可重用
業務邏輯與 UI 分離



🚀 系統特色

完整的 MVC 架構：清晰的職責分離
事件驅動設計：響應式的數據更新
模組化組件：高度可重用的 UI 組件
智能交易系統：多種 AI 交易者模擬
即時市場分析：完整的技術指標支援
價格提醒功能：智能的價格監控系統
快捷交易功能：高效的一鍵交易系統
完善的日誌系統：便於調試和監控
靈活的撮合引擎：支援多種撮合算法

快捷交易系統特色

8種預設交易模式：涵蓋常見交易場景
多種價格策略：市價、限價、溢價、折價
智能交易計算：自動計算最優交易參數
實時預覽驗證：交易前完整預覽和驗證
快捷鍵支援：F1-F4 和 Ctrl 組合鍵
靈活配置管理：支援自定義交易配置

這個架構設計確保了系統的可擴展性、可維護性和高性能，同時提供了豐富的功能和良好的用戶體驗。

主要元件說明
模擬核心
StockMarketSimulation：模擬主控類別，負責定時更新參與者與處理訂單。

StockMarketModel：MVC 中的核心模型，維護市場狀態資料。

市場機制
OrderBook：負責管理買賣訂單與實現不同撮合演算法。

MatchingMode：定義多種訂單撮合策略（標準、價格時間優先、加權、壓力平衡、隨機）。

MarketBehavior：根據不同因子模擬市場走勢與訂單提交。

交易者元件
RetailInvestorAI：模擬散戶的交易行為與策略。

MainForceStrategyWithOrderBook：實作主力機構的交易策略，含主力控盤/做市行為。

PersonalAI：用戶可控制的個人交易者，可手動下單。

市場分析
MarketAnalyzer：計算技術指標（SMA、RSI、WAP、波動率等）。

使用者介面
MainView：顯示即時圖表與市場資訊的主畫面。

ControlView：使用者控制交易操作的面板。

OrderViewer：提供訂單查看與篩選功能。

日誌系統
MarketLogger：自訂的市場事件日誌紀錄器。

LogViewerWindow：可即時檢視並篩選日誌的視窗介面。

技術功能特點
訂單類型支援
限價單：指定價格買賣。

市價單：依市場價格成交。

FOK單（Fill or Kill）：完全成交否則取消。

撮合演算法
標準模式：買價 ≥ 賣價時以中間價格成交。

價格時間優先：同價位按時間優先順序撮合。

加權平均模式：大單有更大價格影響力。

市場壓力模式：考慮買賣單失衡進行調整。

隨機模式：模擬市場隨機波動與不確定性。

技術分析指標
簡單移動平均線（SMA）

相對強弱指數（RSI）

加權平均價格（WAP）

波動率分析

成交量分析

視覺化
即時價格圖

成交量圖

技術指標面板

損益追蹤

訂單簿深度圖示

設定功能
撮合模式選擇

流動性因子調整

隨機模式切換機率

日誌等級自定義


未來更新
-----------------------------------------------------------------------------------------------
視覺設計優化：統一主題、響應式布局、多窗口整合
主視圖改進：分割面板、多圖表支持、圖表交互增強
控制視圖改進：卡片式布局、交互式訂單輸入、即時帳戶儀表板
撮合引擎面板改進：視覺化撮合過程、參數微調、即時統計
訂單簿視圖改進：熱圖式訂單簿、深度圖、多視圖切換
專業功能面板：市場信息、交易策略、交易日誌
系統整合與狀態欄：狀態欄、全局設置系統
高級視覺化與動畫：價格走勢動畫、交易執行效果、技術分析繪製
表格與數據優化：可排序過濾的訂單表格、深度熱圖、交易歷史
使用者體驗改善：聲音反饋、暗色模式、自動保存設置、插件架構
https://chatgpt.com/canvas/shared/682d86cde3a88191a5d21bb3d85a8e22
-----------------------------------------------------------------------------------------------


更新日誌
-----------------------------------------------------------------------------------------------
2024-11-22
主要更新

OrderManagement.OrderViewer.java
界面調整：
增加了窗口大小（調整為 1200x800），以容納更多的表格數據，提升用戶體驗。
確保 JScrollPane 正確設置，允許表格內容滾動顯示，避免因訂單數量過多而影響界面顯示。

OrderManagement.NewOrderBookTable.java
表格模型優化：
確保 NewOrderBookTable 類別的表格模型能夠動態調整行數，顯示所有傳入的訂單數據，無行數限制。
禁止表格單元格編輯，提升數據顯示的穩定性和安全性。

次要更新
界面美化：
調整 OrderViewer 界面佈局，增強視覺效果，提升用戶體驗。
增加不同類型訂單的顏色標識（例如，買單用綠色，賣單用紅色），便於用戶快速識別。
-----------------------------------------------------------------------------------------------


更新日誌
-----------------------------------------------------------------------------------------------
2024-12-13

主要更新
Core.OrderBook.java

撮合邏輯優化：
加入動態限制每次最大成交量，避免單筆大額交易影響市場穩定性。
改善撮合順序，支持價格容忍範圍內的交易，提升成交率。
Core.MarketAnalyzer.java

異常檢測新增：
增加 detectPriceAnomaly 和 detectVolumeAnomaly 方法，用於監控價格波動和成交量異常情況。
異常數據記錄到日誌文件 MarketAnomalies.log，便於後續分析。
OrderManagement.OrderViewer.java

界面優化：
增加異常事件記錄功能，當發生異常（如價格閃崩、自我撮合等）時，高亮顯示並記錄到桌面日誌文件。
調整顯示格式，增加更多表格數據列，提供更詳細的市場深度信息。
次要更新
交易日誌改進：

在 Transaction 類中加入詳細字段，如買方、賣方類型、成交價格、成交量等，提升交易記錄的完整性。
界面美化：

調整訂單顯示的顏色標識，買單用紅色背景，賣單用綠色背景，成交價顯示為醒目的中間價值。
表格滾動條優化，允許快速瀏覽大量訂單數據。

Bug 修復
修復了在自我撮合時的錯誤處理邏輯，現在異常訂單會被跳過，但不會影響其他訂單的撮合過程。
修復了市場異常檢測時，市場庫存計算錯誤的問題，確保市場庫存與預期一致。
-----------------------------------------------------------------------------------------------
